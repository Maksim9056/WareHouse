@page "/Conditions/Add"
@rendermode InteractiveWebAssembly
@using ClassLibrary.Models;
@using BlazorApp.Client.Pages.Component
@inject NavigationManager NavManager
@inject HttpClient HttpClient

<h3>Состояние  создания</h3>
@* 
<div class="mb-3">
    <button class="btn btn-success me-2" @onclick="() => Save()">Сохранить</button>
</div>
<label>Название</label>

@if (typedocs != null)
{
    <input @bind="typedocs.Name" />

} *@

@if (error != "")
    {
<div class="alert alert-danger mb-3">@error</div>
    }
<AutoRefForm TRef="Condition"
             Model="Condition"
             OnValidSubmit="Save" />

@code {
    Condition Condition = new Condition();
    public string error = "";

    private async Task Save()
    {
        try
        {
            if (Condition == null || Condition.Code == null || Condition.Name == null)
            {
                error = "Не заполнено полностью";
            }
            else
            {
                var clien = await HttpClient.PostAsJsonAsync($"Conditions", Condition);

                if (clien.IsSuccessStatusCode)
                {
                    NavManager.NavigateTo("/Conditions");
                }
                else
                {
                    var cd = await clien.Content.ReadAsStringAsync();
                    error = cd;
                }
            }

            // await clien.Content.ReadFromJsonAsync<TypeDoc>();


            // TODO: заменить на реальную логику (навигация, открытие модалки и т.п.)
        }
        catch (Exception e)
        {

        }
    }

    private void OnArchive()
    {
        // TODO: заменить на реальную логику
        // NavManager.NavigateTo("/Clients/Archive");
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // // https://localhost:7166/api/
            // var client = await HttpClient.GetFromJsonAsync<TypeDoc>($"TypeDocs/{Id}");
            // typedocs = client;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }
}
