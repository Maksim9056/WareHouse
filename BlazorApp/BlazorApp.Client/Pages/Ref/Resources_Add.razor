@page "/Resource/add"
@using ClassLibrary.Models
@rendermode InteractiveWebAssembly
@inject NavigationManager NavManager
@inject HttpClient HttpClient

<h3>Ресурсы </h3>

<div class="mb-3">
    <button class="btn btn-success me-2" @onclick="() => Save()">Сохранить</button>
</div>
<label>Название</label>

@if (condition != null)
{
    <input @bind="resource.Name" />


    <label>Код</label>

    <input @bind="resource.Code" />

    <div class="form-group">
        <label >Состояние</label>
        <select @bind="conditions.Id" >

            <option value="">Выберите состояние</option>

            @foreach (var s in condition)
            {

                <option value="@s.Id">@s.Name</option>

            }

        </select>
    </div>
}




@code {
    Resource resource = new Resource();
    IEnumerable<Condition> condition ;
    Condition conditions = new Condition();
    private async Task Save()
    {
        try
        {
            if (conditions != null)
            {

                conditions = condition.FirstOrDefault(u => u.Id == conditions.Id);

                resource.condition = conditions;

                var clien = await HttpClient.PostAsJsonAsync($"Resources", resource);


                // await clien.Content.ReadFromJsonAsync<TypeDoc>();


                // TODO: заменить на реальную логику (навигация, открытие модалки и т.п.)
                NavManager.NavigateTo("/Resource");
            }

        }
        catch (Exception e)
        {

        }
    }

    private void OnLanguageChanged(ChangeEventArgs e)
    {
        // = e.Value.ToString();
        conditions.Name = Convert.ToString(e.Value.ToString());
        // Логика, выполняемая при изменении выбора

        Console.WriteLine($"Выбранное состояние : {conditions.Id}");
    }


    private void OnArchive()
    {
        // TODO: заменить на реальную логику
        // NavManager.NavigateTo("/Clients/Archive");
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {   // httpClientFactory.CreateClient("ApiClient");
            // https://localhost:7166/api/
            var client = await HttpClient.GetFromJsonAsync<IEnumerable<Condition>>("Conditions");
            condition = client;
            // // https://localhost:7166/api/
            // var client = await HttpClient.GetFromJsonAsync<TypeDoc>($"TypeDocs/{Id}");
            // typedocs = client;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }
}
