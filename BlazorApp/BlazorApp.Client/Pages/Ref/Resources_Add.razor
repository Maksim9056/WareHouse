@page "/Resource/add"
@using BlazorApp.Client.Pages.Component
@using ClassLibrary.Models
@rendermode InteractiveWebAssembly
@inject NavigationManager NavManager
@inject HttpClient HttpClient

@* <h3>Ресурсы </h3>

<div class="mb-3">
    <button class="btn btn-success me-2" @onclick="() => Save()">Сохранить</button>
</div>
<label>Название</label>

@if (condition != null)
{
    <input @bind="resource.Name" />


    <label>Код</label>

    <input @bind="resource.Code" />

    <div class="form-group">
        <label >Состояние</label>
        <select @bind="conditions.Id" >

            <option value="">Выберите состояние</option>

            @foreach (var s in condition)
            {

                <option value="@s.Id">@s.Name</option>

            }

        </select>
    </div>
} *@
<h3>Создать ресурс</h3>
@if (conditions == null)
{
    <p>Загрузка...</p>
}
else
{
    @if (error != "")
    {
        <div class="alert alert-danger mb-3">@error</div>
    }
    <AutoRefForm TRef="Resource"
                 Model="resource"
                 ReferenceDictionaries="refDicts"
                 OnValidSubmit="Save" />
}



@code {
    Resource resource = new Resource();
    IEnumerable<Condition> condition ;
    Condition conditions = new Condition();
    Dictionary<Type, IEnumerable<BaseRef>> refDicts;
    public string error = "";

    private async Task Save()
    {
        try
        {
            if (conditions != null)
            {


                if (resource == null || resource.condition == null || resource.Code == null || resource.Name == null)
                {
                    error = "Не заполнено полностью";
                }
                else
                {
                    var clien = await HttpClient.PostAsJsonAsync($"Resources", resource);

                    if (clien.IsSuccessStatusCode)
                    {
                        NavManager.NavigateTo("/Resource");
                    }
                    else
                    {
                        var cd = await clien.Content.ReadAsStringAsync();
                        error = cd;
                    }


                    // TODO: заменить на реальную логику (навигация, открытие модалки и т.п.)
                }
            }

        }
        catch (Exception e)
        {

        }
    }

    // private void OnLanguageChanged(ChangeEventArgs e)
    // {
    //     // = e.Value.ToString();
    //     conditions.Name = Convert.ToString(e.Value.ToString());
    //     // Логика, выполняемая при изменении выбора

    //     Console.WriteLine($"Выбранное состояние : {conditions.Id}");
    // }


    // private void OnArchive()
    // {
    //     // TODO: заменить на реальную логику
    //     // NavManager.NavigateTo("/Clients/Archive");
    // }

    protected override async Task OnInitializedAsync()
    {
        try
        {   // httpClientFactory.CreateClient("ApiClient");
            // https://localhost:7166/api/
            var client = await HttpClient.GetFromJsonAsync<IEnumerable<Condition>>("Conditions");
            condition = client;

            refDicts = new Dictionary<Type, IEnumerable<BaseRef>>
            {
                [typeof(Condition)] = condition
            };
            // // https://localhost:7166/api/
            // var client = await HttpClient.GetFromJsonAsync<TypeDoc>($"TypeDocs/{Id}");
            // typedocs = client;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }
}
