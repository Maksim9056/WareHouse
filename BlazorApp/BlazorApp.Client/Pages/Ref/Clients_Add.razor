@page "/Clients/add"
@using BlazorApp.Client.Pages.Component
@using ClassLibrary.Models
@rendermode InteractiveWebAssembly
@inject NavigationManager NavManager
@inject HttpClient HttpClient


<h3>Создать клиента</h3>
@if (conditions == null)
{
    <p>Загрузка...</p>
}
else
{
    <AutoRefForm TRef="Client"
                 Model="client"
                 ReferenceDictionaries="refDicts"
                 OnValidSubmit="Save" />
}



@code {
    Client client = new Client();
    IEnumerable<Condition> condition;
    Condition conditions = new Condition();
    Dictionary<Type, IEnumerable<BaseRef>> refDicts;

    private async Task Save()
    {
        try
        {
            if (conditions != null)
            {

           
             
                var clien = await HttpClient.PostAsJsonAsync($"Clients", client);

                // TODO: заменить на реальную логику (навигация, открытие модалки и т.п.)
                NavManager.NavigateTo("/Clients");
            }

        }
        catch (Exception e)
        {

        }
    }

    // private void OnLanguageChanged(ChangeEventArgs e)
    // {
    //     // = e.Value.ToString();
    //     conditions.Name = Convert.ToString(e.Value.ToString());
    //     // Логика, выполняемая при изменении выбора

    //     Console.WriteLine($"Выбранное состояние : {conditions.Id}");
    // }


    // private void OnArchive()
    // {
    //     // TODO: заменить на реальную логику
    //     // NavManager.NavigateTo("/Clients/Archive");
    // }

    protected override async Task OnInitializedAsync()
    {
        try
        {   // httpClientFactory.CreateClient("ApiClient");
            // https://localhost:7166/api/
            var client = await HttpClient.GetFromJsonAsync<IEnumerable<Condition>>("Conditions");
            condition = client;

            refDicts = new Dictionary<Type, IEnumerable<BaseRef>>
            {
                [typeof(Condition)] = condition
            };
            // // https://localhost:7166/api/
            // var client = await HttpClient.GetFromJsonAsync<TypeDoc>($"TypeDocs/{Id}");
            // typedocs = client;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }
}
