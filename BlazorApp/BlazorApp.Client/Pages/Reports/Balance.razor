@page "/Balance"
@rendermode InteractiveWebAssembly
@using System.Net.Http.Json
@using ClassLibrary.Models

@inject HttpClient Http

<h3 class="mb-3">Баланс</h3>

<div class="row g-3 align-items-start mb-3">
    <div class="col-md-5">
        <label class="form-label">Ресурс (multi)</label>
        <select multiple class="form-select" style="min-height: 220px"
                @bind="selectedResourceIds" @key="_resKey">
            @foreach (var r in resources)
            {
                <option value="@r.Id.ToString()">@r.Name</option>
            }
        </select>
        <small class="text-muted">Выбрано: @(selectedResourceIds?.Length ?? 0)</small>
    </div>

    <div class="col-md-5">
        <label class="form-label">Единица измерения (multi)</label>
        <select multiple class="form-select" style="min-height: 220px"
                @bind="selectedUnitIds" @key="_unitKey">
            @foreach (var u in units)
            {
                <option value="@u.Id.ToString()">@u.Name</option>
            }
        </select>
        <small class="text-muted">Выбрано: @(selectedUnitIds?.Length ?? 0)</small>
    </div>

    <div class="col-md-2 d-grid gap-2">
        <button class="btn btn-primary" @onclick="Apply" disabled="@loading">Применить</button>
        <button class="btn btn-outline-secondary" @onclick="Clear" disabled="@loading">Сброс</button>
    </div>
</div>

<div class="table-responsive">
    <table class="table table-sm table-hover table-striped">
        <thead class="table-light">
            <tr>
                <th>Ресурс</th>
                <th>Единица измерения</th>
                <th class="text-end">Количество</th>
            </tr>
        </thead>
        <tbody>
            @if (loading)
            {
                <tr><td colspan="3" class="text-center text-muted">Загрузка…</td></tr>
            }
            else if (items.Count == 0)
            {
                <tr><td colspan="3" class="text-center text-muted">Нет данных</td></tr>
            }
            else
            {
                @foreach (var x in items)
                {
                    <tr>
                        <td>@x.ResourceName</td>
                        <td>@x.UnitName</td>
                        <td class="text-end">@x.Quantity</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    sealed class IdNameDto { public int Id { get; set; } public string Name { get; set; } = ""; }

    List<IdNameDto> resources = new();
    List<IdNameDto> units = new();
    List<BalanceRowDto> items = new();

    string[] selectedResourceIds = Array.Empty<string>();
    string[] selectedUnitIds     = Array.Empty<string>();
    bool loading;

    // ключи, чтобы форсировать «перемонтирование» селектов при сбросе
    int _resKey = 0, _unitKey = 0;

    protected override async Task OnInitializedAsync()
    {
        // у тебя были пути "refs/..." и "reports/..." — оставил как есть
        resources = await Http.GetFromJsonAsync<List<IdNameDto>>("refs/resources") ?? new();
        units     = await Http.GetFromJsonAsync<List<IdNameDto>>("refs/units")     ?? new();
        await Load(); // стартовая загрузка без фильтров
    }

    async Task Apply() => await Load();

    async Task Clear()
    {
        selectedResourceIds = Array.Empty<string>();
        selectedUnitIds     = Array.Empty<string>();
        _resKey++; _unitKey++;      // перестроить DOM select'ов
        await Load();               // перезагрузить «все» без фильтров
    }

    async Task Load()
    {
        loading = true;
        try
        {
            var url = "reports/balances";
            var qs  = new List<string>();

            foreach (var id in selectedResourceIds)
                qs.Add($"resourceIds={Uri.EscapeDataString(id)}");
            foreach (var id in selectedUnitIds)
                qs.Add($"unitIds={Uri.EscapeDataString(id)}");

            if (qs.Count > 0)
                url += "?" + string.Join("&", qs);

            items = await Http.GetFromJsonAsync<List<BalanceRowDto>>(url) ?? new();
        }
        finally { loading = false; }
    }
 }