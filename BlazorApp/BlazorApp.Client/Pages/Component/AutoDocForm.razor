@using System.ComponentModel.DataAnnotations
@using ClassLibrary.Models
@inject HttpClient Http

@if (_loading || Model is null)
{
    <p>Загрузка...</p>
}
else
{
    <EditForm Model="Model"
              OnValidSubmit="HandleSaveAsync"
              FormName="@ResolvedFormName">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- TypeDoc (с фильтром "Поступление"/"Отгрузка" если задан AllowedTypeDocIds/Names) -->
        <div class="mb-2">
            <label class="form-label">Тип документа</label>
            <select class="form-select" @bind="_typeDocId" disabled="@IsReadOnly">
                <option value="">— выберите —</option>
                @foreach (var td in FilteredTypeDocs)
                {
                    <option value="@td.Id">@td.Name</option>
                }
            </select>
        </div>

        <!-- Number -->
        <div class="mb-2">
            <label class="form-label">Номер</label>
            <input class="form-control"
                   value="@Model.Number"
                   @oninput="e => Model.Number = e.Value?.ToString() ?? string.Empty"
                   disabled="@IsReadOnly" />
        </div>

        <!-- Date -->
        <div class="mb-2">
            <label class="form-label">Дата</label>
            <InputDate class="form-control" @bind-Value="Model.Date" disabled="@IsReadOnly" />
        </div>

        <!-- Client -->
        <div class="mb-2">
            <label class="form-label">Клиент</label>
            <select class="form-select" @bind="_clientId" disabled="@IsReadOnly">
                <option value="">— выберите —</option>
                @foreach (var c in Clients)
                {
                    <option value="@c.Id">@c.Name</option>
                }
            </select>
        </div>

        <!-- Condition -->
        <div class="mb-2">
            <label class="form-label">Состояние</label>
            <select class="form-select" @bind="_conditionId" disabled="@IsReadOnly">
                <option value="">— выберите —</option>
                @foreach (var s in Conditions)
                {
                    <option value="@s.Id">@s.Name</option>
                }
            </select>
        </div>

        <div class="mt-3">
            @if (!IsReadOnly)
            {
                <button class="btn btn-success me-2" type="submit">Сохранить</button>
            }
            @if (ExtraButtons is not null)
            {
                @ExtraButtons
            }
        </div>
    </EditForm>
}

@code {

    public enum FormMode { Create, Edit, View }  // <-- ДОБАВЬ ЭТО
    // ---------- ПАРАМЕТРЫ ----------
    [Parameter] public FormMode Mode { get; set; } = FormMode.Edit; // Create | Edit | View
    [Parameter] public int? Id { get; set; } // для Edit/View
    [Parameter] public string ApiPath { get; set; } = "Documents";
    [Parameter] public string FormName { get; set; } = "document-form";

    // Кастомные загрузчики/сохранители (необязательно)
    [Parameter] public Func<HttpClient, int, Task<Document>>? Loader { get; set; }
    [Parameter] public Func<HttpClient, Document, Task>? Creator { get; set; } // для Create
    [Parameter] public Func<HttpClient, Document, int, Task>? Saver { get; set; } // для Edit

    // Фильтрация типов документов (любой из параметров можно использовать)
    [Parameter] public IEnumerable<int>? AllowedTypeDocIds { get; set; }
    [Parameter] public IEnumerable<string>? AllowedTypeDocNames { get; set; } // напр. ["Поступление","Отгрузка"]

    // Коллбеки
    [Parameter] public EventCallback<Document> OnSaved { get; set; }
    [Parameter] public RenderFragment? ExtraButtons { get; set; }

    // ---------- STATE ----------
    Document? Model;
    bool _loading = true;

    IEnumerable<TypeDoc> TypeDocs = Array.Empty<TypeDoc>();
    IEnumerable<Client> Clients = Array.Empty<Client>();
    IEnumerable<Condition> Conditions = Array.Empty<Condition>();

    // Привязки к Id для select'ов
    int? _typeDocId;
    int? _clientId;
    int? _conditionId;

    string ResolvedFormName => string.IsNullOrWhiteSpace(FormName) ? "document-form" : FormName;
    bool IsReadOnly => Mode == FormMode.View;

    IEnumerable<TypeDoc> FilteredTypeDocs =>
        (AllowedTypeDocIds is null && AllowedTypeDocNames is null)
        ? TypeDocs
        : TypeDocs.Where(t =>
              (AllowedTypeDocIds?.Contains(t.Id) ?? false)
           || (AllowedTypeDocNames?.Any(n => string.Equals(n, t.Name, StringComparison.OrdinalIgnoreCase)) ?? false));

    // ---------- LIFECYCLE ----------
    protected override async Task OnParametersSetAsync()
    {
        _loading = true;

        // грузим справочники
        var tdTask = Http.GetFromJsonAsync<IEnumerable<TypeDoc>>("TypeDocs");
        var clTask = Http.GetFromJsonAsync<IEnumerable<Client>>("Clients");
        var csTask = Http.GetFromJsonAsync<IEnumerable<Condition>>("Conditions");

        await Task.WhenAll(tdTask!, clTask!, csTask!);

        TypeDocs = tdTask!.Result ?? Array.Empty<TypeDoc>();
        Clients = clTask!.Result ?? Array.Empty<Client>();
        Conditions = csTask!.Result ?? Array.Empty<Condition>();

        // грузим/инициализируем сам документ
        if (Mode == FormMode.Create)
        {
            Model = new Document
            {
                Date = DateOnly.FromDateTime(DateTime.Today)
            };
        }
        else
        {
            if (Id is null)
                throw new InvalidOperationException("Id обязателен для режима Edit/View.");

            Model = Loader is not null
                ? await Loader(Http, Id.Value)
                : await Http.GetFromJsonAsync<Document>($"{ApiPath}/{Id.Value}");
        }

        // синхронизируем Id-шники для выпадающих списков
        _typeDocId = Model?.TypeDoc?.Id;
        _clientId = Model?.Client?.Id;
        _conditionId = Model?.Condition?.Id;

        _loading = false;
    }

    // ---------- SUBMIT ----------
    async Task HandleSaveAsync()
    {
        if (Model is null) return;

        // из выбранных Id восстанавливаем ссылки
        Model.TypeDoc = _typeDocId is int tid ? TypeDocs.FirstOrDefault(x => x.Id == tid)! : null;
        Model.Client = _clientId is int cid ? Clients.FirstOrDefault(x => x.Id == cid)! : null;
        Model.Condition = _conditionId is int sid ? Conditions.FirstOrDefault(x => x.Id == sid)! : null;

        if (Mode == FormMode.Create)
        {
            if (Creator is not null)
                await Creator(Http, Model);
            else
                await Http.PostAsJsonAsync(ApiPath, Model);
        }
        else // Edit
        {
            if (Id is null) return;

            if (Saver is not null)
                await Saver(Http, Model, Id.Value);
            else
                await Http.PutAsJsonAsync($"{ApiPath}/{Id.Value}", Model);
        }

        await OnSaved.InvokeAsync(Model);
    }
}

// ---------- ВСПОМОГАТЕЛЬНЫЙ ТИП ----------
public enum FormMode { Create, Edit, View }
