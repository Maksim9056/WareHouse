@page "/Document/add"
@page "/Document/{Id:int}"
@rendermode InteractiveWebAssembly
@using ClassLibrary.Models
@inject HttpClient Http
@inject NavigationManager Nav

<h3>@(Id == 0 ? "Создание документа" : "Редактирование документа")</h3>

@if (_document == null || _resources == null)
{
    <p>Загрузка...</p>
}
else
{
    <EditForm Model="_document" OnValidSubmit="Save">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Шапка -->
        <div class="card p-3 mb-3">
            <div class="row g-2">
                <div class="col-md-3">
                    <label>Номер</label>
                    <InputText class="form-control" @bind-Value="_document.Number" />
                </div>
                <div class="col-md-3">
                    <label>Дата</label>
                    <InputDate class="form-control" @bind-Value="_document.Date" />
                </div>
                <div class="col-md-3">
                    <label>Тип документа</label>
                    <InputSelect class="form-select" @bind-Value="_typeDocId">
                        <option value="0">— выберите —</option>
                        @foreach (var t in _typeDocs)
                        {
                            <option value="@t.Id">@t.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-3">
                    <label>Клиент</label>
                    <InputSelect class="form-select" @bind-Value="_clientId">
                        <option value="0">— выберите —</option>
                        @foreach (var c in _clients)
                        {
                            <option value="@c.Id">@c.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-3">
                    <label>Состояние</label>
                    <InputSelect class="form-select" @bind-Value="_conditionId">
                        <option value="0">— выберите —</option>
                        @foreach (var s in _conditions)
                        {
                            <option value="@s.Id">@s.Name</option>
                        }
                    </InputSelect>
                </div>
            </div>
        </div>

        <!-- Таблица строк -->
        <div class="d-flex align-items-center mb-2">
            <h5 class="m-0 me-3">Позиции</h5>
            <button type="button" class="btn btn-sm btn-primary" @onclick="AddRow">Добавить</button>
        </div>

        <table class="table table-sm">
            <thead>
                <tr>
                    <th>Дата/время</th>
                    <th>Ресурс</th>
                    <th>Ед.</th>
                    <th>Кол-во</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < _resources.Count; i++)
                {
                    var row = _resources[i];
                    var idx = i;
                    <!-- ВАЖНО: локальная копия индекса -->

                    <tr @key="idx">
                        <td>
                            <InputDate class="form-control form-control-sm" @bind-Value="row.DateTime" />
                        </td>
                        <td>
                            <InputSelect TValue="int"
                                         class="form-select form-select-sm"
                                         Value="_resourceIds[idx]"
                                         ValueChanged="(int v) => _resourceIds[idx] = v"
                                         ValueExpression="@(() => _resourceIds[idx])">
                                <option value="0">— выберите —</option>
                                @foreach (var r in _allResources)
                                {
                                    <option value="@r.Id">@r.Name</option>
                                }
                            </InputSelect>
                        </td>
                        <td>
                            <InputSelect TValue="int"
                                         class="form-select form-select-sm"
                                         Value="_unitIds[idx]"
                                         ValueChanged="(int v) => _unitIds[idx] = v"
                                         ValueExpression="@(() => _unitIds[idx])">
                                <option value="0">— выберите —</option>
                                @foreach (var u in _allUnits)
                                {
                                    <option value="@u.Id">@u.Name</option>
                                }
                            </InputSelect>
                        </td>
                        <td>
                            <InputNumber class="form-control form-control-sm" @bind-Value="row.Count" />
                        </td>
                        <td>
                            <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => RemoveRow(idx)">×</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="mt-3">
            <button type="submit" class="btn btn-success">Сохранить</button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">Отмена</button>
        </div>
    </EditForm>
}

@code {
    [Parameter] public int Id { get; set; }

    Document? _document;
    List<Document_resource>? _resources;

    // Справочники
    IEnumerable<TypeDoc> _typeDocs = [];
    IEnumerable<Client> _clients = [];
    IEnumerable<Condition> _conditions = [];
    IEnumerable<Resource> _allResources = [];
    IEnumerable<Unit> _allUnits = [];

    // выбранные Id
    int _typeDocId;
    int _clientId;
    int _conditionId;
    List<int> _resourceIds = new();
    List<int> _unitIds = new();

    protected override async Task OnInitializedAsync()
    {
        // Сначала справочники
        _typeDocs = await Http.GetFromJsonAsync<IEnumerable<TypeDoc>>("TypeDocs") ?? [];
        _clients = await Http.GetFromJsonAsync<IEnumerable<Client>>("Clients") ?? [];
        _conditions = await Http.GetFromJsonAsync<IEnumerable<Condition>>("Conditions") ?? [];
        _allResources = await Http.GetFromJsonAsync<IEnumerable<Resource>>("Resources") ?? [];
        _allUnits = await Http.GetFromJsonAsync<IEnumerable<Unit>>("Unit") ?? [];

        // Потом документ
        if (Id == 0)
        {
            _document = new Document { Date = DateTime.Today };
            _resources = new();
            _typeDocId = 0; _clientId = 0; _conditionId = 0;
        }
        else
        {
            _document = await Http.GetFromJsonAsync<Document>($"Documents/{Id}");
            _resources = await Http.GetFromJsonAsync<List<Document_resource>>($"Documents/{Id}/items");

            _typeDocId = _document?.TypeDoc?.Id ?? 0;
            _clientId = _document?.Client?.Id ?? 0;
            _conditionId = _document?.Condition?.Id ?? 0;

            _resourceIds = _resources.Select(r => r.Resource?.Id ?? 0).ToList();
            _unitIds = _resources.Select(r => r.Unit?.Id ?? 0).ToList();
        }
    }

    void AddRow()
    {
        _resources!.Add(new Document_resource { DateTime = DateTime.Now, Count = 1 });
        _resourceIds.Add(0);
        _unitIds.Add(0);
    }

    void RemoveRow(int index)
    {
        _resources!.RemoveAt(index);
        _resourceIds.RemoveAt(index);
        _unitIds.RemoveAt(index);
    }

    async Task Save()
    {
        if (string.IsNullOrWhiteSpace(_document?.Number))
            return; // номер обязателен

        // Проверка, что выбраны существующие значения из справочников
        if (!_typeDocs.Any(t => t.Id == _typeDocId) ||
            !_clients.Any(c => c.Id == _clientId) ||
            !_conditions.Any(s => s.Id == _conditionId))
        {
            Console.WriteLine("Ошибка: выбраны несуществующие значения справочников");
            return;
        }

        if (_typeDocId == 0 || _clientId == 0 || _conditionId == 0)
            return; // выбери все справочники

        _document!.TypeDoc = new TypeDoc { Id = _typeDocId };
        _document.Client = new Client { Id = _clientId };
        _document.Condition = new Condition { Id = _conditionId };

        var resp = Id == 0
            ? await Http.PostAsJsonAsync("Documents", _document)
            : await Http.PutAsJsonAsync($"Documents/{Id}", _document);

        resp.EnsureSuccessStatusCode();
        Nav.NavigateTo("/Document");
    }

    void Cancel() => Nav.NavigateTo("/Document");
}
