@page "/Shipments/add"
@page "/Shipments/{Id:int}"
@rendermode InteractiveWebAssembly
@using System.Net
@using System.Net.Http.Json
@using System.Linq
@using ClassLibrary.Models
@inject HttpClient Http
@inject NavigationManager Nav

<h3>@(Id == 0 ? "Создание отгрузки" : "Редактирование отгрузки")</h3>

@if (_loading)
{
    <p>Загрузка...</p>
}
else if (_typeDocId == 0)
{
    <div class="alert alert-danger">Не найден тип документа «Отгрузка». Проверь справочник TypeDocs.</div>
}
else if (_document == null)
{
    <div class="alert alert-warning">Данные не найдены.</div>
}
else
{
    <EditForm Model="_document" OnValidSubmit="Save">
        <DataAnnotationsValidator />
        <ValidationSummary />
        @if (!string.IsNullOrEmpty(_error))
        {
            <div class="alert alert-danger mb-3">@_error</div>
        }

        <!-- Шапка -->
        <div class="card p-3 mb-3">
            <div class="row g-2">
                <div class="col-md-3">
                    <label class="form-label">Номер</label>
                    <InputText class="@FieldCss("form-control", "Number")" @bind-Value="_document.Number" />
                    @if (_fieldErrors.TryGetValue("Number", out var eNum))
                    {
                        <div class="invalid-feedback d-block">@eNum</div>
                    }
                </div>
                <div class="col-md-3">
                    <label class="form-label">Дата</label>
                    <InputDate TValue="DateOnly" class="@FieldCss("form-control", "Date")" @bind-Value="_document.Date" />
                    @if (_fieldErrors.TryGetValue("Date", out var eDate))
                    {
                        <div class="invalid-feedback d-block">@eDate</div>
                    }
                </div>
                <div class="col-md-3">
                    <label class="form-label">Тип документа</label>
                    <input class="form-control" value="@_typeDocName" disabled />
                </div>
                <div class="col-md-3">
                    <label class="form-label">Клиент</label>
                    <InputSelect class="@FieldCss("form-select", "Client")" @bind-Value="_clientId">
                        <option value="0">— выберите —</option>
                        @foreach (var c in _clients)
                        {
                            <option value="@c.Id">@c.Name</option>
                        }
                    </InputSelect>
                    @if (_fieldErrors.TryGetValue("Client", out var eClient))
                    {
                        <div class="invalid-feedback d-block">@eClient</div>
                    }
                </div>
                <div class="col-md-3">
                    <label class="form-label">Состояние</label>
                    <InputSelect class="@FieldCss("form-select", "Condition")" @bind-Value="_conditionId">
                        <option value="0">— выберите —</option>
                        @foreach (var s in _conditions)
                        {
                            <option value="@s.Id">@s.Name</option>
                        }
                    </InputSelect>
                    @if (_fieldErrors.TryGetValue("Condition", out var eCond))
                    {
                        <div class="invalid-feedback d-block">@eCond</div>
                    }
                </div>
            </div>
        </div>

        <!-- Панель -->
        <div class="d-flex align-items-center justify-content-between mb-2">
            <div class="d-flex align-items-center">
                <h5 class="m-0 me-3">Позиции</h5>
                <span class="badge bg-secondary">Всего: @_rows.Count</span>
            </div>
            <div class="d-flex gap-2">
                <button type="button" class="btn btn-sm btn-outline-primary" @onclick="OpenServices">Сервисы</button>
            </div>
        </div>

        <!-- Таблица позиций (READ-ONLY, с удалением) -->
        <div class="table-responsive">
            <table class="table table-sm table-hover table-striped align-middle">
                <thead class="table-light">
                    <tr>
                        <th style="width: 180px;">Дата/время</th>
                        <th>Ресурс</th>
                        <th style="width: 220px;">Ед. изм.</th>
                        <th class="text-end" style="width: 140px;">Кол-во</th>
                        <th style="width: 80px;"></th>
                    </tr>
                </thead>
                <tbody>
                    @if (_rows.Count == 0)
                    {
                        <tr><td colspan="5" class="text-center text-muted">Нет позиций</td></tr>
                    }
                    else
                    {
                        @foreach (var row in _rows)
                        {
                            <tr @key="row">
                                <td>@row.DateTime.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</td>
                                <td>@GetResourceName(row.ResourceId)</td>
                                <td>@GetUnitName(row.UnitId)</td>
                                <td class="text-end">@row.Count</td>
                                <td class="text-end">
                                    <button type="button" class="btn btn-sm btn-outline-danger" title="Удалить"
                                            @onclick="() => RemoveRow(row)">
                                        ×
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        <div class="mt-3">
            <button type="submit" class="btn btn-success me-2" disabled="@_saving">
                @(_saving ? "Сохранение..." : "Сохранить")
            </button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">Отмена</button>
        </div>
    </EditForm>
}

@* ---------- МОДАЛЬНОЕ ОКНО «Сервисы» (Баланс + К добавлению) ---------- *@
@if (showServices)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" aria-modal="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Сервисы — Баланс</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseServices"></button>
                </div>

                <div class="modal-body">
                    <!-- Фильтры -->
                    <div class="row g-3 align-items-start mb-3">
                        <div class="col-md-5">
                            <label class="form-label">Ресурс (multi)</label>
                            <select multiple class="form-select" style="min-height: 220px"
                                    @bind="svcResourceIds" @key="_svcResKey">
                                @foreach (var r in _allResources)
                                {
                                    <option value="@r.Id.ToString()">@r.Name</option>
                                }
                            </select>
                            <small class="text-muted">Выбрано: @(svcResourceIds == null ? 0 : svcResourceIds.Length)</small>
                        </div>

                        <div class="col-md-5">
                            <label class="form-label">Единица измерения (multi)</label>
                            <select multiple class="form-select" style="min-height: 220px"
                                    @bind="svcUnitIds" @key="_svcUnitKey">
                                @foreach (var u in _allUnits)
                                {
                                    <option value="@u.Id.ToString()">@u.Name</option>
                                }
                            </select>
                            <small class="text-muted">Выбрано: @(svcUnitIds == null ? 0 : svcUnitIds.Length)</small>
                        </div>

                        <div class="col-md-2 d-grid gap-2">
                            <button class="btn btn-primary" @onclick="SvcApply" disabled="@svcLoading">Применить</button>
                            <button class="btn btn-outline-secondary" @onclick="SvcClear" disabled="@svcLoading">Сброс</button>
                        </div>
                    </div>

                    <!-- Таблица баланса -->
                    <div class="table-responsive mb-2">
                        <table class="table table-sm table-hover table-striped">
                            <thead class="table-light">
                                <tr>
                                    <th>Ресурс</th>
                                    <th>Единица измерения</th>
                                    <th class="text-end">Остаток</th>
                                    <th class="text-end" style="width: 160px;">К добавлению</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (svcLoading)
                                {
                                    <tr><td colspan="4" class="text-center text-muted">Загрузка…</td></tr>
                                }
                                else if (svcItems.Count == 0)
                                {
                                    <tr><td colspan="4" class="text-center text-muted">Нет данных</td></tr>
                                }
                                else
                                {
                                    @foreach (var x in svcItems)
                                    {
                                        <tr>
                                            <td>@x.ResourceName</td>
                                            <td>@x.UnitName</td>
                                            <td class="text-end">@x.Quantity</td>
                                            <td class="text-end">
                                                <InputNumber TValue="int"
                                                             Value="x.ToAdd"
                                                             ValueChanged="(int v) => OnToAddChanged(x, v)"
                                                             ValueExpression="@(() => x.ToAdd)"
                                                             class="form-control form-control-sm text-end" />
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="CloseServices">Готово</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public int Id { get; set; }

    private sealed class IdName { public int Id { get; set; } public string Name { get; set; } = ""; }
    private sealed class SvcBalanceRowDto
    {
        public int ResourceId { get; set; }
        public string ResourceName { get; set; } = "";
        public int UnitId { get; set; }
        public string UnitName { get; set; } = "";
        public long Quantity { get; set; }
        public int ToAdd { get; set; } = 0;
    }

    // Шапка
    private Document _document = new Document();
    private int _typeDocId;
    private int _clientId;
    private int _conditionId;
    private string _typeDocName = "Отгрузка";

    // Позиции
    private List<Document_resource> _rows = new();

    // Справочники
    private IEnumerable<TypeDoc> _typeDocs = new List<TypeDoc>();
    private IEnumerable<Client> _clients = new List<Client>();
    private IEnumerable<Condition> _conditions = new List<Condition>();
    private List<IdName> _allResources = new();
    private List<IdName> _allUnits = new();

    // Прочее
    private bool _loading = true;
    private string _error = string.Empty;

    // Валидация/сохранение
    private bool _saving = false;
    private readonly Dictionary<string, string> _fieldErrors = new();
    private string FieldCss(string baseCss, string key)
        => _fieldErrors.ContainsKey(key) ? $"{baseCss} is-invalid" : baseCss;

    // Модалка «Сервисы/Баланс»
    private bool showServices = false;
    private string[] svcResourceIds = Array.Empty<string>();
    private string[] svcUnitIds = Array.Empty<string>();
    private int _svcResKey = 0, _svcUnitKey = 0;
    private bool svcLoading = false;
    private List<SvcBalanceRowDto> svcItems = new();

    protected override async Task OnInitializedAsync()
    {
        _typeDocs = await Http.GetFromJsonAsync<IEnumerable<TypeDoc>>("TypeDocs") ?? new List<TypeDoc>();
        _clients = await Http.GetFromJsonAsync<IEnumerable<Client>>("Clients") ?? new List<Client>();
        _conditions = await Http.GetFromJsonAsync<IEnumerable<Condition>>("Conditions") ?? new List<Condition>();

        _allResources = await Http.GetFromJsonAsync<List<IdName>>("refs/resources") ?? new List<IdName>();
        _allUnits = await Http.GetFromJsonAsync<List<IdName>>("refs/units") ?? new List<IdName>();

        _typeDocId = _typeDocs.FirstOrDefault(t => t.Name == "Отгрузка")?.Id ?? 0;
        _typeDocName = _typeDocs.FirstOrDefault(t => t.Id == _typeDocId)?.Name ?? _typeDocName;

        if (Id == 0)
        {
            _document = new Document
            {
                Number = "",
                Date = DateOnly.FromDateTime(DateTime.Today),
                TypeDocId = _typeDocId
            };
            _clientId = 0;
            _conditionId = 0;
            _rows = new List<Document_resource>();
        }
        else
        {
            var doc = await Http.GetFromJsonAsync<Document>($"Documents/{Id}");
            _document = doc ?? new Document();
            _rows = await Http.GetFromJsonAsync<List<Document_resource>>($"Documents/{Id}/items") ?? new List<Document_resource>();

            if (doc == null) _error = "Документ не найден.";
            if (doc != null && _typeDocId != 0 &&
                _document.TypeDocId != _typeDocId && (_document.TypeDoc?.Id ?? 0) != _typeDocId)
            {
                _error = "Этот документ не является Отгрузкой.";
            }

            _clientId = _document.Client?.Id ?? _document.ClientId;
            _conditionId = _document.Condition?.Id ?? _document.ConditionId;
        }

        _loading = false;
    }

    private string GetResourceName(int id) => _allResources.FirstOrDefault(x => x.Id == id)?.Name ?? "";
    private string GetUnitName(int id) => _allUnits.FirstOrDefault(x => x.Id == id)?.Name ?? "";

    private void RemoveRow(Document_resource row)
    {
        _rows.Remove(row);
        StateHasChanged();
    }

    private async Task Save()
    {
        if (_saving) return;
        _saving = true;
        try
        {
            showServices = false;

            _error = string.Empty;
            _fieldErrors.Clear();

            // === Клиентская валидация шапки ===
            if (string.IsNullOrWhiteSpace(_document.Number))
                _fieldErrors["Number"] = "Укажите номер документа.";

            if (_document.Date == default)
                _fieldErrors["Date"] = "Укажите дату.";

            if (_typeDocId == 0)
                _error = "Не найден тип документа «Отгрузка».";
            if (_clientId == 0)
                _fieldErrors["Client"] = "Выберите клиента.";
            if (_conditionId == 0)
                _fieldErrors["Condition"] = "Выберите состояние.";

            // Слить ввод из модалки в строки
            FlushPlannedAdditions();

            // Валидация строк
            if (_rows.Count == 0)
                _error = string.IsNullOrEmpty(_error) ? "Добавьте хотя бы одну позицию." : _error;

            if (_rows.Any(r => r.ResourceId == 0 || r.UnitId == 0))
                _error = string.IsNullOrEmpty(_error) ? "Для всех строк укажите ресурс и единицу измерения." : _error;

            if (_rows.Any(r => r.Count < 1))
                _error = string.IsNullOrEmpty(_error) ? "Количество в строках должно быть ≥ 1." : _error;

            if (_fieldErrors.Count > 0 || !string.IsNullOrEmpty(_error))
            {
                StateHasChanged();
                return;
            }

            // === Сохранение шапки ===
            var payloadDoc = new
            {
                Id = Id,
                Number = _document.Number.Trim(),
                Date = _document.Date,
                TypeDocId = _typeDocId,
                ClientId = _clientId,
                ConditionId = _conditionId
            };

            HttpResponseMessage headResp = (Id == 0)
                ? await Http.PostAsJsonAsync("Documents", payloadDoc)
                : await Http.PutAsJsonAsync($"Documents/{Id}", payloadDoc);

            if (!headResp.IsSuccessStatusCode)
            {
                var text = await headResp.Content.ReadAsStringAsync();

                if (headResp.StatusCode == HttpStatusCode.Conflict || headResp.StatusCode == HttpStatusCode.BadRequest)
                {
                    _fieldErrors["Number"] = !string.IsNullOrWhiteSpace(text)
                        ? text
                        : "Документ с таким номером уже существует.";
                    _error = _fieldErrors["Number"];
                    return;
                }

                _error = string.IsNullOrWhiteSpace(text)
                    ? $"{(int)headResp.StatusCode} {headResp.ReasonPhrase}"
                    : text;
                return;
            }

            int docId = (Id == 0)
                ? (await headResp.Content.ReadFromJsonAsync<int>())
                : Id;

            // === Сохранение строк (bulk) ===
            var rowsPayload = _rows.Select(src => new
            {
                Id = src.Id,
                DocumentId = docId,
                ResourceId = src.ResourceId,
                UnitId = src.UnitId,
                DateTime = src.DateTime.ToUniversalTime(),
                Count = src.Count
            }).ToList();

            var rowsResp = await Http.PostAsJsonAsync($"Document_resource/bulk/{docId}", rowsPayload);
            if (!rowsResp.IsSuccessStatusCode)
            {
                var text = await rowsResp.Content.ReadAsStringAsync();
                _error = string.IsNullOrWhiteSpace(text)
                    ? $"{(int)rowsResp.StatusCode} {rowsResp.ReasonPhrase}"
                    : text;
                return;
            }

            // Успех → переход к списку
            Nav.NavigateTo("/Shipments");
        }
        catch (Exception ex)
        {
            _error = $"Ошибка: {ex.Message}";
        }
        finally
        {
            _saving = false;
            StateHasChanged();
        }
    }

    private void Cancel() => Nav.NavigateTo("/Shipments");

    // === Сервисы (Баланс) ===
    private async Task OpenServices()
    {
        showServices = true;
        await SvcLoad();
    }

    private void CloseServices()
    {
        FlushPlannedAdditions();
        showServices = false;
    }

    private async Task SvcApply() => await SvcLoad();

    private async Task SvcClear()
    {
        svcResourceIds = Array.Empty<string>();
        svcUnitIds = Array.Empty<string>();
        _svcResKey++; _svcUnitKey++;
        await SvcLoad();
    }

    private async Task SvcLoad()
    {
        svcLoading = true;
        try
        {
            var url = "reports/balances";
            var qs = new List<string>();

            foreach (var id in svcResourceIds) qs.Add("resourceIds=" + Uri.EscapeDataString(id));
            foreach (var id in svcUnitIds) qs.Add("unitIds=" + Uri.EscapeDataString(id));

            if (qs.Count > 0) url += "?" + string.Join("&", qs);

            var data = await Http.GetFromJsonAsync<List<SvcBalanceRowDto>>(url);
            svcItems = data ?? new List<SvcBalanceRowDto>();
        }
        finally
        {
            svcLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    // Ограничения ввода: >=0 и <= Остаток
    private void OnToAddChanged(SvcBalanceRowDto row, int value)
    {
        if (value < 0) value = 0;

        long max = row.Quantity;
        long clamped = value;

        if (clamped > max) clamped = max;
        if (clamped > int.MaxValue) clamped = int.MaxValue;

        int finalVal = (int)clamped;

        if (row.ToAdd != finalVal)
        {
            row.ToAdd = finalVal;
            StateHasChanged();
        }
        else
        {
            row.ToAdd = finalVal;
        }
    }

    // Забрать из модалки все позиции с ToAdd>0
    private void FlushPlannedAdditions()
    {
        if (svcItems == null || svcItems.Count == 0) return;

        foreach (var x in svcItems)
        {
            long max = x.Quantity;
            long clamped = x.ToAdd;

            if (clamped < 0) clamped = 0;
            if (clamped > max) clamped = max;
            if (clamped > int.MaxValue) clamped = int.MaxValue;

            int qty = (int)clamped;

            if (qty > 0)
            {
                _rows.Add(new Document_resource
                {
                    Id = 0,
                    DateTime = DateTimeOffset.UtcNow,
                    DocumentId = Id,
                    ResourceId = x.ResourceId,
                    UnitId = x.UnitId,
                    Count = qty
                });
                x.ToAdd = 0; // сброс после добавления
            }
        }

        StateHasChanged();
    }
}