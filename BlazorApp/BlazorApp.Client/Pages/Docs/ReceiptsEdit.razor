@page "/Receipts/add"
@page "/Receipts/{Id:int}"
@rendermode InteractiveWebAssembly
@using System.Net
@using System.Net.Http.Json
@using System.Linq
@using ClassLibrary.Models
@inject HttpClient Http
@inject NavigationManager Nav

<h3>@(Id == 0 ? "Создание поступления" : "Редактирование поступления")</h3>

@if (_loading)
{
    <p>Загрузка...</p>
}
else if (_typeDocId == 0)
{
    <div class="alert alert-danger">Не найден тип документа «Поступление». Проверь справочник TypeDocs.</div>
}
else if (_document is null || _resources is null)
{
    <div class="alert alert-warning">Данные не найдены.</div>
}
else
{
    <EditForm Model="_document" OnValidSubmit="Save">
        <DataAnnotationsValidator />
        <ValidationSummary />
        @if (!string.IsNullOrEmpty(_error))
        {
            <div class="alert alert-danger mb-3">@_error</div>
        }

        <!-- Шапка -->
        <div class="card p-3 mb-3">
            <div class="row g-2">
                <div class="col-md-3">
                    <label class="form-label">Номер</label>
                    <InputText class="@FieldCss("form-control", "Number")" @bind-Value="_document.Number" />
                    @if (_fieldErrors.TryGetValue("Number", out var eNum))
                    {
                        <div class="invalid-feedback d-block">@eNum</div>
                    }
                </div>
                <div class="col-md-3">
                    <label class="form-label">Дата</label>
                    <InputDate TValue="DateOnly" class="@FieldCss("form-control", "Date")" @bind-Value="_document.Date" />
                    @if (_fieldErrors.TryGetValue("Date", out var eDate))
                    {
                        <div class="invalid-feedback d-block">@eDate</div>
                    }
                </div>
                <div class="col-md-3">
                    <label class="form-label">Тип документа</label>
                    <input class="form-control" value="@_typeDocName" disabled />
                </div>
                <div class="col-md-3">
                    <label class="form-label">Клиент</label>
                    <InputSelect class="@FieldCss("form-select", "Client")" @bind-Value="_clientId">
                        <option value="0">— выберите —</option>
                        @foreach (var c in _clients)
                        {
                            <option value="@c.Id">@c.Name</option>
                        }
                    </InputSelect>
                    @if (_fieldErrors.TryGetValue("Client", out var eClient))
                    {
                        <div class="invalid-feedback d-block">@eClient</div>
                    }
                </div>
                <div class="col-md-3">
                    <label class="form-label">Состояние</label>
                    <InputSelect class="@FieldCss("form-select", "Condition")" @bind-Value="_conditionId">
                        <option value="0">— выберите —</option>
                        @foreach (var s in _conditions)
                        {
                            <option value="@s.Id">@s.Name</option>
                        }
                    </InputSelect>
                    @if (_fieldErrors.TryGetValue("Condition", out var eCond))
                    {
                        <div class="invalid-feedback d-block">@eCond</div>
                    }
                </div>
            </div>
        </div>

        <!-- Позиции (для Поступления могут отсутствовать) -->
        <div class="d-flex align-items-center mb-2">
            <h5 class="m-0 me-3">Позиции</h5>
            <button type="button" class="btn btn-sm btn-primary" @onclick="AddRow">Добавить</button>
        </div>

        <div class="table-responsive">
            <table class="table table-sm align-middle">
                <thead>
                    <tr>
                        <th style="width: 180px;">Дата/время</th>
                        <th>Ресурс</th>
                        <th style="width: 220px;">Ед. изм.</th>
                        <th style="width: 140px;">Кол-во</th>
                        <th style="width: 60px;"></th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < _resources.Count; i++)
                    {
                        var row = _resources[i];
                        var idx = i;
                        <tr @key="idx">
                            <td>
                                <InputDate TValue="DateTimeOffset" class="form-control form-control-sm" @bind-Value="row.DateTime" />
                            </td>
                            <td>
                                <InputSelect TValue="int"
                                             class="form-select form-select-sm"
                                             Value="_resourceIds[idx]"
                                             ValueChanged="(int v) => _resourceIds[idx] = v"
                                             ValueExpression="@(() => _resourceIds[idx])">
                                    <option value="0">— выберите —</option>
                                    @foreach (var r in _allResources)
                                    {
                                        <option value="@r.Id">@r.Name</option>
                                    }
                                </InputSelect>
                            </td>
                            <td>
                                <InputSelect TValue="int"
                                             class="form-select form-select-sm"
                                             Value="_unitIds[idx]"
                                             ValueChanged="(int v) => _unitIds[idx] = v"
                                             ValueExpression="@(() => _unitIds[idx])">
                                    <option value="0">— выберите —</option>
                                    @foreach (var u in _allUnits)
                                    {
                                        <option value="@u.Id">@u.Name</option>
                                    }
                                </InputSelect>
                            </td>
                            <td>
                                <InputNumber TValue="int" class="form-control form-control-sm" @bind-Value="row.Count" />
                            </td>
                            <td class="text-end">
                                <button type="button" class="btn btn-sm btn-outline-danger" title="Удалить" @onclick="() => RemoveRow(idx)">×</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="mt-3">
            <button type="submit" class="btn btn-success me-2" disabled="@_saving">
                @(_saving ? "Сохранение..." : "Сохранить")
            </button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">Отмена</button>
        </div>
    </EditForm>
}

@code {
    [Parameter] public int Id { get; set; }

    // Шапка
    Document? _document;

    // Строки
    List<Document_resource>? _resources;

    // Справочники
    IEnumerable<TypeDoc> _typeDocs = [];
    IEnumerable<Client> _clients = [];
    IEnumerable<Condition> _conditions = [];
    IEnumerable<Resource> _allResources = [];
    IEnumerable<Unit> _allUnits = [];

    // выбранные Id
    int _typeDocId;
    int _clientId;
    int _conditionId;
    List<int> _resourceIds = new();
    List<int> _unitIds = new();

    // прочее
    string _typeDocName = "Поступление";
    bool _loading = true;
    string _error = string.Empty;

    // валидация/сохранение
    bool _saving = false;
    readonly Dictionary<string, string> _fieldErrors = new();
    string FieldCss(string baseCss, string key) => _fieldErrors.ContainsKey(key) ? $"{baseCss} is-invalid" : baseCss;

    protected override async Task OnInitializedAsync()
    {
        // Справочники
        _typeDocs = await Http.GetFromJsonAsync<IEnumerable<TypeDoc>>("TypeDocs") ?? [];
        _clients = await Http.GetFromJsonAsync<IEnumerable<Client>>("Clients") ?? [];
        _conditions = await Http.GetFromJsonAsync<IEnumerable<Condition>>("Conditions") ?? [];
        _allResources = await Http.GetFromJsonAsync<IEnumerable<Resource>>("Resources") ?? [];
        _allUnits = await Http.GetFromJsonAsync<IEnumerable<Unit>>("Unit") ?? [];

        // Тип «Поступление»
        _typeDocId = _typeDocs.FirstOrDefault(t => t.Name == "Поступление")?.Id ?? 0;
        _typeDocName = _typeDocs.FirstOrDefault(t => t.Id == _typeDocId)?.Name ?? _typeDocName;

        if (Id == 0)
        {
            _document = new Document
            {
                Number = "",
                Date = DateOnly.FromDateTime(DateTime.Today),
                TypeDocId = _typeDocId
            };
            _resources = new();
            _clientId = 0;
            _conditionId = 0;
        }
        else
        {
            _document = await Http.GetFromJsonAsync<Document>($"Documents/{Id}");
            _resources = await Http.GetFromJsonAsync<List<Document_resource>>($"Documents/{Id}/items");

            if (_document is null) _error = "Документ не найден.";
            if (_document is not null && _typeDocId != 0 &&
                _document.TypeDocId != _typeDocId && (_document.TypeDoc?.Id ?? 0) != _typeDocId)
            {
                _error = "Этот документ не является Поступлением.";
            }

            _clientId = _document?.Client?.Id ?? _document?.ClientId ?? 0;
            _conditionId = _document?.Condition?.Id ?? _document?.ConditionId ?? 0;

            _resourceIds = _resources?.Select(r => r.Resource?.Id ?? r.ResourceId).ToList() ?? new();
            _unitIds = _resources?.Select(r => r.Unit?.Id ?? r.UnitId).ToList() ?? new();
        }

        _loading = false;
    }

    void AddRow()
    {
        _resources!.Add(new Document_resource
        {
            DateTime = DateTimeOffset.UtcNow,
            Count = 1
        });
        _resourceIds.Add(0);
        _unitIds.Add(0);
    }

    void RemoveRow(int index)
    {
        if (index < 0 || index >= _resources!.Count) return;
        _resources!.RemoveAt(index);
        _resourceIds.RemoveAt(index);
        _unitIds.RemoveAt(index);
    }

    async Task Save()
    {
        if (_document is null || _resources is null) return;
        if (_saving) return;
        _saving = true;

        try
        {
            _error = string.Empty;
            _fieldErrors.Clear();

            // === Клиентская валидация шапки ===
            if (string.IsNullOrWhiteSpace(_document.Number))
                _fieldErrors["Number"] = "Укажите номер документа.";

            if (_document.Date == default)
                _fieldErrors["Date"] = "Укажите дату.";

            if (_typeDocId == 0)
                _error = "Не найден тип документа «Поступление».";
            if (_clientId == 0)
                _fieldErrors["Client"] = "Выберите клиента.";
            if (_conditionId == 0)
                _fieldErrors["Condition"] = "Выберите состояние.";

            // Строки опциональны, но если есть — проверим
            if (_resources.Count > 0)
            {
                if (_resources.Count != _resourceIds.Count || _resources.Count != _unitIds.Count)
                    _error = string.IsNullOrEmpty(_error) ? "Разъехались массивы строк." : _error;

                if (_resourceIds.Any(x => x == 0) || _unitIds.Any(x => x == 0))
                    _error = string.IsNullOrEmpty(_error) ? "Для всех строк укажите ресурс и единицу." : _error;

                if (_resources.Any(r => r.Count < 1))
                    _error = string.IsNullOrEmpty(_error) ? "Количество должно быть ≥ 1." : _error;
            }

            if (_fieldErrors.Count > 0 || !string.IsNullOrEmpty(_error))
            {
                StateHasChanged();
                return;
            }

            // === Сохранение шапки ===
            var payloadDoc = new
            {
                Id = Id,
                Number = _document.Number.Trim(),
                Date = _document.Date,
                TypeDocId = _typeDocId,
                ClientId = _clientId,
                ConditionId = _conditionId
            };

            HttpResponseMessage headResp = (Id == 0)
                ? await Http.PostAsJsonAsync("Documents", payloadDoc)
                : await Http.PutAsJsonAsync($"Documents/{Id}", payloadDoc);

            if (!headResp.IsSuccessStatusCode)
            {
                var text = await headResp.Content.ReadAsStringAsync();

                // Обработка дубликата (уникальность номера)
                if (headResp.StatusCode == HttpStatusCode.Conflict || headResp.StatusCode == HttpStatusCode.BadRequest)
                {
                    _fieldErrors["Number"] = !string.IsNullOrWhiteSpace(text)
                        ? text
                        : "Документ с таким номером уже существует.";
                    _error = _fieldErrors["Number"];
                    return;
                }

                _error = string.IsNullOrWhiteSpace(text)
                    ? $"{(int)headResp.StatusCode} {headResp.ReasonPhrase}"
                    : text;
                return;
            }

            int docId = (Id == 0)
                ? (await headResp.Content.ReadFromJsonAsync<int>())
                : Id;

            // === Сохранение строк (всегда отправляем; пустой список очищает документ) ===
            var rowsPayload = new List<object>(_resources.Count);
            for (int i = 0; i < _resources.Count; i++)
            {
                var src = _resources[i];
                rowsPayload.Add(new
                {
                    Id = src.Id, // 0 — новая строка
                    DocumentId = docId,
                    ResourceId = _resourceIds[i],
                    UnitId = _unitIds[i],
                    DateTime = src.DateTime.ToUniversalTime(),
                    Count = src.Count
                });
            }

            var rowsResp = await Http.PostAsJsonAsync($"Document_resource/bulk/{docId}", rowsPayload);
            if (!rowsResp.IsSuccessStatusCode)
            {
                var text = await rowsResp.Content.ReadAsStringAsync();
                _error = string.IsNullOrWhiteSpace(text)
                    ? $"{(int)rowsResp.StatusCode} {rowsResp.ReasonPhrase}"
                    : text;
                return;
            }

            // Успех → переход к списку
            Nav.NavigateTo("/Receipts");
        }
        catch (Exception ex)
        {
            _error = $"Ошибка: {ex.Message}";
        }
        finally
        {
            _saving = false;
            StateHasChanged();
        }
    }

    void Cancel() => Nav.NavigateTo("/Receipts");
}
