// <auto-generated />
using System;
using ClassLibrary.Date;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClassLibrary.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250806190313_InitialCreate1")]
    partial class InitialCreate1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClassLibrary.Models.Balance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int>("ResourceId")
                        .HasColumnType("integer");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UnitId");

                    b.ToTable("Balance");
                });

            modelBuilder.Entity("ClassLibrary.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("conditionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("conditionId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("ClassLibrary.Models.Condition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Condition");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Подписан",
                            Name = "Подписан"
                        },
                        new
                        {
                            Id = 2,
                            Code = "Отозван",
                            Name = "Отозван"
                        },
                        new
                        {
                            Id = 3,
                            Code = "Не подписан",
                            Name = "Не подписан"
                        },
                        new
                        {
                            Id = 4,
                            Code = "В наличии",
                            Name = "В наличии"
                        },
                        new
                        {
                            Id = 5,
                            Code = "Закончился",
                            Name = "Закончился"
                        },
                        new
                        {
                            Id = 6,
                            Code = "Закупка",
                            Name = "Закупка"
                        },
                        new
                        {
                            Id = 7,
                            Code = "Активный",
                            Name = "Активный"
                        },
                        new
                        {
                            Id = 8,
                            Code = "Новый",
                            Name = "Новый"
                        },
                        new
                        {
                            Id = 9,
                            Code = "Готов",
                            Name = "Готов"
                        },
                        new
                        {
                            Id = 10,
                            Code = "Архив",
                            Name = "Архив"
                        });
                });

            modelBuilder.Entity("ClassLibrary.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<int>("ConditionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeDocId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("TypeDocId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("ClassLibrary.Models.Document_resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<int>("ResourceId")
                        .HasColumnType("integer");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UnitId");

                    b.ToTable("Document_resource");
                });

            modelBuilder.Entity("ClassLibrary.Models.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("conditionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("conditionId");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("ClassLibrary.Models.TypeDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeDoc");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Поступление",
                            Name = "Поступление"
                        },
                        new
                        {
                            Id = 2,
                            Code = "Отгрузка",
                            Name = "Отгрузка"
                        });
                });

            modelBuilder.Entity("ClassLibrary.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("conditionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("conditionId");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("ClassLibrary.Models.Balance", b =>
                {
                    b.HasOne("ClassLibrary.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibrary.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ClassLibrary.Models.Client", b =>
                {
                    b.HasOne("ClassLibrary.Models.Condition", "condition")
                        .WithMany()
                        .HasForeignKey("conditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("condition");
                });

            modelBuilder.Entity("ClassLibrary.Models.Document", b =>
                {
                    b.HasOne("ClassLibrary.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibrary.Models.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibrary.Models.TypeDoc", "TypeDoc")
                        .WithMany()
                        .HasForeignKey("TypeDocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Condition");

                    b.Navigation("TypeDoc");
                });

            modelBuilder.Entity("ClassLibrary.Models.Document_resource", b =>
                {
                    b.HasOne("ClassLibrary.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibrary.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibrary.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Resource");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ClassLibrary.Models.Resource", b =>
                {
                    b.HasOne("ClassLibrary.Models.Condition", "condition")
                        .WithMany()
                        .HasForeignKey("conditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("condition");
                });

            modelBuilder.Entity("ClassLibrary.Models.Unit", b =>
                {
                    b.HasOne("ClassLibrary.Models.Condition", "condition")
                        .WithMany()
                        .HasForeignKey("conditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("condition");
                });
#pragma warning restore 612, 618
        }
    }
}
